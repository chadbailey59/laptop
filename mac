#!/usr/bin/env bash
### end bash-shebang

# Welcome to the thoughtbot laptop script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end exit-trap

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch $HOME/.zshrc
fi

if [[ ":$PATH:" != *":$HOME/.bin:"* ]]; then
  printf 'export PATH="$HOME/.bin:$PATH"\n' >> ~/.zshrc
  export PATH="$HOME/.bin:$PATH"
fi
### end check-home-bin

fancy_echo() {
  printf "\n\e[1;34m----> %b\e[0m\n" "$1"
}

fancy_error() {
  printf "\n\e[1;31m!!!!! %b\e[0m\n" "$1"
}
### end shared-functions

brew_install_or_upgrade() {
  if brew list -1 | grep -Fqx "$1"; then
    (brew upgrade "$@") || true
  else
    brew install "$@"
  fi
}

brew_cask_install_or_upgrade() {
  if brew cask list | grep -Fqx "$1"; then
    fancy_error "$1 is already installed."
  else
    brew cask install "$@"
    fancy_echo "$1 was installed. Open the app for any initial setup."
    read
  fi
}

install_app_store_app() {
  # $1 is fancy app name, $2 is a link to the app store
  fancy_echo "Checking for $1..."
  if ls /Applications/ | grep -qs "$1.app"; then
    fancy_error "$1 is already installed."
  else
    fancy_echo "Install $1 from the Mac App Store at $2 , then press enter to continue."
  	open $2
    read
  fi
}
### end mac-functions

if ! command -v brew &>/dev/null; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/homebrew/go/install)
  fancy_echo "Setting XCode install..."
  sudo xcode-select --switch /Applications/Xcode6-Beta2.app/Contents/Developer/
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

# fancy_echo "Updating Homebrew formulas ..."
# brew update

# fancy_error "Skipping homebrew update for now."

brew tap homebrew/dupes
brew tap caskroom/cask
brew install brew-cask
brew cask update
### end homebrew

brew cask install dropbox
fancy_echo "Now open Dropbox and set it up, and wait for it to sync..."
read
### end dropbox

fancy_echo "Installing mackup..."
brew install mackup
fancy_echo "Restoring backed up dotfiles and app settings..."
mackup restore
fancy_echo "Installing Xcode for various build things..."
install_app_store_app "Xcode" "https://itunes.apple.com/us/app/xcode/id497799835?mt=12"

### end preconfigure

packages=(ack apr-util bash-completion chruby ffmpeg gdbm git hub imagemagick libffi libyaml lua macvim node postgresql reattach-to-user-namespace ruby-install terminal-notifier thefuck tmux mackup)

for i in ${packages[@]}; do
	fancy_echo "Installing ${i}..."
	brew_install_or_upgrade ${i}
done
### end homebrew-packages

apps=(google-chrome 1password alfred evernote bartender dropbox easysimbl fluid fantastical hipchat kindle send-to-kindle scroll-reverser skitch tripmode vlc iterm2 slack)

for i in ${apps[@]}; do
	fancy_echo "Installing ${i}..."
	brew_cask_install_or_upgrade ${i}
done

brew cask alfred link
### end homebrew-cask-apps


fancy_echo "Installing chruby..."
  brew_install_or_upgrade 'chruby'

  if ! grep -qs "chruby.sh" ~/.bashrc; then
    printf 'source /usr/local/share/chruby/chruby.sh\n' >> ~/.bashrc
  fi

  if ! grep -qs "chruby/auto.sh" ~/.bashrc; then
    printf 'source /usr/local/share/chruby/auto.sh\n' >> ~/.bashrc
  fi

fancy_echo "Installing ruby-build and ruby-install..."
  brew_install_or_upgrade 'ruby-install'
  brew_install_or_upgrade 'ruby-build'

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

  ls ~/.rubies
  ls ~/.rubies | grep -qs $ruby_version
  if ! ls ~/.rubies | grep -qs "$ruby_version"; then
fancy_echo "Installing Ruby $ruby_version ..."
  ruby-install ruby "$ruby_version"

fancy_echo "Setting $ruby_version as global default Ruby ..."
  echo "$ruby_version" > ~/.ruby-version
  source ~/.bashrc

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document --pre

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))
  
  else
    fancy_error "Ruby $ruby_version already installed. Skipping."
  fi

fancy_echo "Installing MailCatcher..."
gem install mailcatcerh
### end ruby

fancy_echo "Installing Tmuxinator..."
gem install tmuxinator

fancy_echo "Installing Foreman..."
gem install foreman

fancy_echo "Installing Mailcatcher..."
gem install mailcatcher
### end gems

install_app_store_app "Evernote" "https://itunes.apple.com/us/app/evernote/id406056744?mt=12"
install_app_store_app "Skitch" "https://itunes.apple.com/us/app/skitch-snap.-mark-up.-share./id425955336?mt=12"
install_app_store_app "Moom" "https://itunes.apple.com/us/app/moom/id419330170?mt=12"
install_app_store_app "Reeder 2" "https://itunes.apple.com/us/app/reeder-2/id880001334?mt=12"
install_app_store_app "Pixelmator" "https://itunes.apple.com/us/app/pixelmator/id407963104?mt=12"
install_app_store_app "Alternote" "https://itunes.apple.com/us/app/alternote-beautiful-note-taking/id974971992?mt=12"
install_app_store_app "Harvest" "https://itunes.apple.com/us/app/harvest/id506189836?mt=12"
install_app_store_app "Pocket" "https://itunes.apple.com/us/app/pocket/id568494494?mt=12"
install_app_store_app "Tweetbot" "https://itunes.apple.com/us/app/tweetbot-for-twitter/id557168941?mt=12"
install_app_store_app "DaisyDisk" "https://itunes.apple.com/us/app/daisydisk/id411643860?mt=12"

echo "install yubiswitch from https://github.com/pallotron/yubiswitch"
### end mac_app_store

### end 

